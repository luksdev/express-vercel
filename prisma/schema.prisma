generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String

  @@map("categories")
}

model Instructors {
  id            Int    @id @default(autoincrement())
  name          String
  description   String
  image_profile String

  Courses Courses[]

  @@map("instructors")
}

model Courses {
  id            Int    @id @default(autoincrement())
  title         String
  cover_image   String
  description   String
  id_category   Int
  id_instructor Int
  subject       String

  // Relations
  instructor Instructors @relation(fields: [id_instructor], references: [id])

  modules         Modules[]
  startedCourses  startedCourses[]
  ratingCourse    ratingCourse[]
  finishedClasses finishedClasses[]

  @@map("courses")
}

model Modules {
  id        Int    @id @default(autoincrement())
  name      String
  id_course Int

  // Relations
  course          Courses           @relation(fields: [id_course], references: [id])
  classes         Classes[]
  finishedClasses finishedClasses[]

  @@map("modules")
}

model Classes {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url_video   String
  id_module   Int
  duration    Float
  is_finished Boolean? @default(false)

  // Relations
  module          Modules           @relation(fields: [id_module], references: [id])
  comments        Comments[]
  library         Library[]
  finishedClasses finishedClasses[]

  @@map("classes")
}

model Library {
  id       Int    @id @default(autoincrement())
  url      String
  id_class Int

  // Relations
  class Classes @relation(fields: [id_class], references: [id])

  @@map("library")
}

model Comments {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  id_class  Int
  id_user   Int

  class          Classes          @relation(fields: [id_class], references: [id])
  user           Users            @relation(fields: [id_user], references: [id])
  Comments_reply Comments_reply[]

  @@map("comments")
}

model Comments_reply {
  id            Int     @id @default(autoincrement())
  comment_reply String
  id_comment    Int
  id_user       Int
  is_reply      Boolean @default(false)

  // Relations
  comment Comments @relation(fields: [id_comment], references: [id])
  user    Users    @relation(fields: [id_user], references: [id])

  @@map("comments_reply")
}

model ImagesCourses {
  id        Int      @id @default(autoincrement())
  name      String
  key       String
  url_image String
  id_course Int
  createdAt DateTime @default(now())
  size      Int

  @@map("images_courses")
}

model ImagesInstructors {
  id            Int      @id @default(autoincrement())
  name          String
  key           String
  size          Int
  url_image     String
  id_instructor Int
  createdAt     DateTime @default(now())

  @@map("images_instructors")
}

model Users {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  name       String
  identifier String   @unique
  password   String
  role       Int      @default(0)
  job        String?

  comments       Comments[]
  Comments_reply Comments_reply[]
  startedCourses startedCourses[]
  ratingCourse   ratingCourse[]

  @@map("users")
}

model ratingCourse {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  rating_text String
  is_favorite Boolean  @default(false)

  id_user   Int
  id_course Int

  user   Users   @relation(fields: [id_user], references: [id])
  course Courses @relation(fields: [id_course], references: [id])

  @@map("rating_course")
}

model startedCourses {
  id        Int      @id @default(autoincrement())
  id_course Int
  id_user   Int
  createdAt DateTime @default(now())

  // Relations
  course Courses @relation(fields: [id_course], references: [id])
  user   Users   @relation(fields: [id_user], references: [id])

  @@map("started_courses")
}

model finishedClasses {
  id        Int      @id @default(autoincrement())
  id_course Int
  id_module Int
  id_class  Int
  id_user   Int
  createdAt DateTime @default(now())
  // Relations
  course    Courses  @relation(fields: [id_course], references: [id])
  module    Modules  @relation(fields: [id_module], references: [id])
  class     Classes  @relation(fields: [id_class], references: [id])
}